using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Assign2Coffee
{
    class Assign2Coffee
    {
        //Variables
        private double coffeeBagPrice = 5.5;

        private int coffeeBagInLargeBox = 20;
        private int coffeeBagInMediumBox = 10;
        private int coffeeBagInSmallBox = 5;

        private double largeBoxCost = 2;
        private double mediumBoxCost = 1.5;
        private double smallBoxCost = 1;

		private int largeBoxCount = 0;
        private int mediumBoxCount = 0;
        private int smallBoxCount = 0;

		
        private int orderWeight = 0;
        private int numOfBags = 0;
        private double shippingCost = 0;
        private double discount = 0;
		private double boxCost = 0;
		private bool continueBool = false;

        public Assign2Coffee(){
        }

        static void Main(string[] args)
        {
            Assign2Coffee myCoffee = new Assign2Coffee();

            Console.WriteLine("Running coffee program, calculating orders for...");
            myCoffee.calculateTotal(0);
            myCoffee.calculateTotal(-10);
            myCoffee.calculateTotal(4);
            myCoffee.calculateTotal(5);
            myCoffee.calculateTotal(7);
            myCoffee.calculateTotal(10);
            myCoffee.calculateTotal(16);
            myCoffee.calculateTotal(20);
            myCoffee.calculateTotal(100);
            myCoffee.calculateTotal(102);
            myCoffee.calculateTotal(105);
            myCoffee.calculateTotal(110);
            myCoffee.calculateTotal(115);
            myCoffee.calculateTotal(117);

            Console.WriteLine("Program complete... press enter to exit.");
            Console.ReadLine();
        }
        

        public void calculateTotal(int lbsClientOrdered)
        {
            continueBool = false;
			inputScrubbing(lbsClientOrdered);
			if(continueBool ==true){
				calculateNumOfBags();
				calculateNumOfBoxes();
				calculateShipping();
                calculateBoxCost();
				calculateDiscount();
				displayTotal();
			}
        }

        private void inputScrubbing(int lbsOrdered)
        {
            Console.WriteLine("************************\n");
            Console.WriteLine("input = " + lbsOrdered);
            if (lbsOrdered == 0)
            {
                Console.WriteLine("Can not order 0 lbs of coffee, go away.");
                Console.WriteLine("\n************************\n");
            }
            else if (lbsOrdered < 0)
            {
                Console.WriteLine("Can not order a negative weight of coffee, go away.");
                Console.WriteLine("\n************************\n");
            }
            else
            {
                Console.WriteLine("Order weight approved, order placed for " + lbsOrdered + " lbs.");
                orderWeight = lbsOrdered;
                continueBool = true;
            }
        }

        private void calculateNumOfBags(){
            numOfBags = Convert.ToInt32(orderWeight) / 2;
            if (orderWeight % 2 != 0)
            {
                numOfBags += 1;
            }
        }

        private void calculateNumOfBoxes(){
            int largeRemainder = numOfBags % 20;

            largeBoxCount = (numOfBags - largeRemainder) / 20;
            if (largeRemainder > 15)
            {
                mediumBoxCount = 1;
                smallBoxCount = 2;
            }else if(largeRemainder > 10)
            {
                mediumBoxCount = 1;
                smallBoxCount = 1;
            }
            else if (largeRemainder == 10)
            {
                mediumBoxCount = 1; 
            }
            else if (largeRemainder > 5)
            {
                smallBoxCount = 2;
            }
            else if (largeRemainder > 0)
            {
                smallBoxCount = 1;
            }
        }

        private void calculateShipping(){
            if (orderWeight <= 50)
                shippingCost = 10;
            else if (orderWeight <= 100)
                shippingCost = 10 + .2 * (orderWeight - 50);
            else if (orderWeight <= 200)
                shippingCost = 20 + .15 * (orderWeight - 50);
            else if (orderWeight <= 300)
                shippingCost = 35 + .1 * (orderWeight - 50);
            else if (orderWeight <= 400)
                shippingCost = 45 + .05 * (orderWeight - 50);
            else if (orderWeight > 400)
                shippingCost = 50 + .02 * (orderWeight - 50);
        }
		
		private void calculateBoxCost(){
			boxCost = largeBoxCost*largeBoxCount;
			boxCost += mediumBoxCost*mediumBoxCount;
			boxCost += smallBoxCost*smallBoxCount;
		}

        private void calculateDiscount(){
            if (numOfBags <= 25)
                discount = 0;
            else if (numOfBags <= 50)
                discount = .05;
            else if (numOfBags <= 100)
                discount = 0.1;
            else if (numOfBags <= 150)
                discount = 0.15;
            else if (numOfBags <= 200)
                discount = 0.2;
            else if (numOfBags > 200)
                discount = 0.25;
        }

        private void displayTotal(){
            double total = numOfBags * coffeeBagPrice;
            Console.WriteLine("Order placed for:");
            Console.WriteLine(numOfBags + " bags");

            Console.WriteLine("Large box count: " + largeBoxCount);
            Console.WriteLine("Medium box count: " + mediumBoxCount);
            Console.WriteLine("Small box count: " + smallBoxCount);
            Console.WriteLine("Total cost of boxes = $" + boxCost);

            Console.WriteLine("Shipping = $ " + shippingCost);
            Console.WriteLine("Total before shipping/boxes = $ " + total);
            Console.WriteLine("Discount: " + discount*100 + "%");
            Console.WriteLine("Grand Total: $ " + (total * (1 - discount) + shippingCost + boxCost));
            Console.WriteLine("\n************************\n");
            reinitialize();
        }

        private void reinitialize()
        {
		    largeBoxCount = 0;
            mediumBoxCount = 0;
            smallBoxCount = 0;
            orderWeight = 0;
            numOfBags = 0;
            shippingCost = 0;
            discount = 0;
            boxCost = 0;
		    continueBool = false;
        }
    }


}
